# Sistema de Recomendações de Turismo 4.0

## Visão Geral

Este sistema processa questionários de usuários, aplica filtros inteligentes e gera recomendações personalizadas de locais turísticos em Cuiabá, criando itinerários completos salvos no banco de dados.

## Fluxo do Sistema

1. **Frontend** envia questionário com respostas do usuário
2. **Backend** processa respostas e cria perfil do usuário
3. **Sistema** aplica filtros inteligentes (ex: tem filhos = evita bares noturnos)
4. **Sistema** filtra locais por tags de preferência
5. **Sistema** envia dados para algoritmo de recomendação (simulado)
6. **Sistema** cria itinerário completo no banco de dados
7. **Sistema** retorna recomendações e ID do itinerário

## Estrutura do Banco de Dados

### Tabelas Principais

- **locais**: Armazena informações dos locais turísticos
- **local_tags**: Tags de cada local (cultura, natureza, etc.)
- **itinerarios**: Itinerários gerados para os usuários
- **itens_itinerario**: Itens individuais de cada itinerário
- **users**: Usuários do sistema

## Como Usar

### 1. Registro e Login

```bash
# Registrar usuário
POST /api/auth/register
{
    "username": "joao",
    "password": "123456"
}

# Fazer login
POST /api/auth/login
{
    "username": "joao", 
    "password": "123456"
}
# Retorna token JWT para usar nos outros endpoints
```

### 2. Processar Questionário

```bash
POST /api/questionario/processar
```

**Exemplo de JSON de entrada:**
```json
{
    "usuarioId": 1,
    "respostas": [
        {
            "pergunta": "Questão 1: Qual seu tipo preferido de comida?",
            "respostaSelecionada": "Churrasco"
        },
        {
            "pergunta": "Questão 2: Qual evento você prefere?",
            "respostaSelecionada": "Shopping"
        },
        {
            "pergunta": "Questão 3: Você gosta de saídas culturais?",
            "respostaSelecionada": "Museu"
        },
        {
            "pergunta": "Questão 4: Qual você acha mais interessante?",
            "respostaSelecionada": "Cultura"
        },
        {
            "pergunta": "Questão 5: Você Tem filhos?",
            "respostaSelecionada": "2"
        },
        {
            "pergunta": "Questão 6: Algo mais animado ou calmo?",
            "respostaSelecionada": "Mais para calmo"
        },
        {
            "pergunta": "Questão 7: Você pode comer carne?",
            "respostaSelecionada": "Sim, sem restrições"
        },
        {
            "pergunta": "Questão 8: Qual ambiente você prefere?",
            "respostaSelecionada": "Cultural"
        }
    ]
}
```

**Resposta de exemplo:**
```json
{
    "message": "Recomendações geradas com sucesso!",
    "locaisRecomendados": [
        {
            "id": 1,
            "nome": "Casa do Artesão",
            "descricao": "Centro de artesanato local com peças típicas de Mato Grosso",
            "endereco": "Praça do Arsenal, Centro Histórico, Cuiabá",
            "telefone": "(65) 3624-9060",
            "precoMedio": 0.0,
            "avaliacaoMedia": 4.3,
            "tags": ["cultura", "arte", "historia"],
            "tempoMedioVisita": 60,
            "pontuacaoRecomendacao": 8.2
        }
    ],
    "totalLocais": 8,
    "itinerarioGerado": "Itinerário criado com ID: 1. Duração estimada: 480 minutos. Custo estimado: R$ 45.00"
}
```

### 3. Gerenciar Itinerários

```bash
# Listar itinerários de um usuário
GET /api/itinerarios/usuario/1

# Obter detalhes de um itinerário
GET /api/itinerarios/1

# Marcar item como visitado
PUT /api/itinerarios/item/1/marcar-visitado

# Obter estatísticas
GET /api/itinerarios/estatisticas
```

### 4. Explorar Locais

```bash
# Listar todos os locais
GET /api/locais

# Buscar por nome
GET /api/locais/buscar?nome=Pantanal

# Buscar por tag
GET /api/locais/tag/cultura

# Locais para família
GET /api/locais/familia

# Locais vegetarianos
GET /api/locais/vegetariano

# Por faixa de preço
GET /api/locais/preco?precoMin=0&precoMax=50

# Por avaliação
GET /api/locais/avaliacao?avaliacaoMinima=4.0

# Locais próximos
GET /api/locais/proximos?latitude=-15.601&longitude=-56.098&distanciaKm=5
```

## Filtros Inteligentes Implementados

### 1. Filtro de Família
- **Se tem filhos**: Evita ambientes noturnos
- **Se tem filhos**: Prioriza locais adequados para crianças
- **Exceções**: Permite shopping, natureza, parques mesmo sem marcação específica

### 2. Filtro Alimentar
- **Se vegetariano/vegano**: Filtra restaurantes sem opções vegetarianas
- **Aplica apenas**: Em locais com tags alimentares (churrasco, brasileira, etc.)

### 3. Sistema de Tags

O sistema utiliza 20 tags principais:

| Categoria | Tags |
|-----------|------|
| **Interesse** | cultura, natureza, esporte, arte, historia |
| **Ambiente** | noturno, bar, museu, shopping, familia |
| **Atividade** | parque de diversoes, agua, animal, fitness |
| **Gastronomia** | churrasco, brasileira, japonesa, italiana, vegana, fast food |

## Locais Incluídos (100 locais)

### Exemplos por Categoria:

**Cultura (5 locais)**
- Casa do Artesão
- Museu da Pedra  
- Centro Geodésico da América do Sul
- Teatro de Arena
- Biblioteca Estevão de Mendonça

**Natureza (5 locais)**
- Arena Pantanal
- Parque Tia Nair
- Parque Zé Bolo Flô
- Jardim Botânico de Cuiabá
- Parque da Família

**Churrasco (5 locais)**
- Churrascaria Pantanal
- Portal do Pantanal
- Espeto de Ouro
- Churrascaria do Gaúcho
- Tradição Gaúcha

*E mais 85 locais em 17 outras categorias...*

## Algoritmo de Recomendação

### Lógica de Pontuação:
1. **Avaliação do local** × 2
2. **Número de tags** × 0.5
3. **Fator aleatório** para variedade
4. **Ordenação** por pontuação decrescente
5. **Limite** de 10 recomendações

### Integração Externa:
- Preparado para integrar com algoritmo externo via POST
- URL configurável: `http://algoritmo-service:8080/api/recomendar`
- Fallback para algoritmo local em caso de erro

## Configuração de Desenvolvimento

### Pré-requisitos:
- Java 21
- Docker & Docker Compose
- Maven 3.9+

### Executar Sistema:

```bash
# 1. Subir banco de dados
docker-compose up db -d

# 2. Executar aplicação Spring Boot
./mvnw spring-boot:run

# 3. Ou usar Docker completo
docker-compose up --build
```

### URLs Importantes:
- **API**: http://localhost:8080
- **Swagger**: http://localhost:8080/swagger-ui.html
- **Database**: localhost:5432 (admin/admin123)

## Configurações do Banco

```sql
-- Executar após subir o sistema para popular dados
-- O script SQL com 100 locais está incluído no projeto
```

## Próximos Passos

1. **Algoritmo Externo**: Integrar com serviço de ML real
2. **Geolocalização**: Melhorar cálculos de distância
3. **Avaliações**: Sistema de feedback dos usuários
4. **Notificações**: Lembretes de itinerários
5. **Compartilhamento**: Permitir compartilhar itinerários

## Endpoints Swagger

Acesse `/swagger-ui.html` para documentação interativa completa de todos os endpoints.

## Estrutura de Arquivos Criados

```
src/main/java/br/com/Turismo_40/
├── Entity/
│   ├── Local/
│   │   ├── Model/Local.java
│   │   ├── Repository/LocalRepository.java
│   │   └── Controller/LocalController.java
│   ├── Questionario/
│   │   ├── Dto/
│   │   ├── Service/QuestionarioService.java
│   │   └── Controller/QuestionarioController.java
│   └── Itinerario/
│       ├── Model/
│       ├── Repository/
│       ├── Service/ItinerarioService.java
│       └── Controller/ItinerarioController.java
└── Config/
    └── RestTemplateConfig.java
```

## Contribuindo

1. Clone o repositório
2. Crie uma branch para sua feature
3. Siga os padrões de código existentes
4. Adicione testes se necessário
5. Faça pull request

---

**Desenvolvido para o sistema de Turismo 4.0 - Cuiabá/MT**